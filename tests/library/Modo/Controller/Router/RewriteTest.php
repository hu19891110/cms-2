<?php
namespace Modo\Controller\Router;

require_once 'PHPUnit/Framework.php';

/**
 * Test class for Rewrite.
 * Generated by PHPUnit on 2009-12-24 at 12:55:51.
 */
class RewriteTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Rewrite
     */
    protected $rewrite;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->rewrite = new Rewrite;
        $this->rewrite->removeDefaultRoutes();
        
        $coreDirectRoute = new \Core\Model\Route('direct/:controller/:action');
        $coreDirectRoute->id = 1;
        $coreDirectRoute->isDirect = true;

        $coreModuleRoute = new \Core\Model\Route('direct/:module/:controller/:action');
        $coreModuleRoute->id = 2;
        $coreModuleRoute->isDirect = true;

        $testRoute = new \Core\Model\Route('test');
        $testRoute->id = 3;
        $testRoute->isDirect = false;

        $articleRoute = new \Core\Model\Route('blog/article/:id');
        $articleRoute->id = 4;
        $articleRoute->isDirect = false;

        $this->rewrite->addRoute('direct2', $coreModuleRoute);
        $this->rewrite->addRoute('direct', $coreDirectRoute);
        $this->rewrite->addRoute('test', $testRoute);
        $this->rewrite->addRoute('article', $articleRoute);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @expectedException Zend_Controller_Router_Exception
     */
    public function testUnknownRoute()
    {
        $request = new \Modo\Controller\Request\Http('http://cms/sadfasdfasdf');
        $this->rewrite->route($request);
    }

    public function testTestRoute()
    {
        $request = new \Modo\Controller\Request\Http('http://cms/test');
        $this->rewrite->route($request);
        $route = $this->rewrite->getCurrentRoute();
        $this->assertEquals(3, $route->id);
        $this->assertFalse($route->isDirect);
        $this->assertEquals(3, $request->getParam('routeId'));
    }

    public function testRouteWithParams()
    {
        $request = new \Modo\Controller\Request\Http('http://cms/blog/article/1');
        $this->rewrite->route($request);
        $route = $this->rewrite->getCurrentRoute();
        $this->assertEquals(4, $route->id);
        $this->assertFalse($route->isDirect);
        $this->assertEquals(4, $request->getParam('routeId'));
        $this->assertEquals(1, $request->getParam('id'));
    }

    public function testDirectRoute()
    {
        $request = new \Modo\Controller\Request\Http('http://cms/direct/controller/action');
        $this->rewrite->route($request);
        $route = $this->rewrite->getCurrentRoute();
        $this->assertEquals(1, $route->id, 'Incorrect route');
        $this->assertTrue($route->isDirect);
        $this->assertEquals(1, $request->getParam('routeId'), 'routeId param not being set correctly.');
        $this->assertEquals('default', $route->getModule(), 'Module being specified incorrectly');
        $this->assertEquals('controller', $request->getParam('controller'), 'Controller being specified incorrectly.');
        $this->assertEquals('action', $request->getParam('action'), 'Action being specified incorrectly.');
    }

    public function testDirectModuleRoute()
    {
        $request = new \Modo\Controller\Request\Http('http://cms/direct/module/controller/action');
        $this->rewrite->route($request);
        $route = $this->rewrite->getCurrentRoute();
        $this->assertEquals($route->id, 2, 'Incorrect route');
        $this->assertTrue($route->isDirect);
        $this->assertEquals(2, $request->getParam('routeId'), 'routeId param not being set correctly.');
        $this->assertEquals('module', $request->getParam('module'), 'Module being specified incorrectly');
        $this->assertEquals('controller', $request->getParam('controller'), 'Controller being specified incorrectly.');
        $this->assertEquals('action', $request->getParam('action'), 'Action being specified incorrectly.');
    }
}
?>
