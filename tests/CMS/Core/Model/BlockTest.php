<?php
namespace Core\Model;

require_once 'PHPUnit/Framework.php';

/**
 * Test class for Block.
 * Generated by PHPUnit on 2010-01-14 at 10:05:03.
 */
class BlockTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Block
     */
    protected $block;

    protected $page;
    protected $left;
    protected $view;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->view = new \Mock\View();
        $this->block = new \Mock\Block($this->view);
        $this->page = new Page(new Layout('test'));
        $this->left = new \Core\Model\Layout\Location('left');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    public function testConfigure()
    {
        $this->block->configure();
        $this->assertArrayHasKey('testParam', $this->block->configProperties);
        $default = $this->block->getConfigProperty('testParam')->getDefault();
        $this->assertEquals('test', $default);
    }

    public function testAddConfigProperty()
    {
        $this->block->addConfigProperty(new Block\Config\Property('test'));
        $this->assertArrayHasKey('test', $this->block->configProperties);
    }

    public function testAddConfigProperties()
    {
        $properties = array(
            new Block\Config\Property('test1'),
            new Block\Config\Property('test2')
        );
        $this->block->addConfigProperties($properties);
        $this->assertArrayHasKey('test1', $this->block->configProperties);
        $this->assertArrayHasKey('test2', $this->block->configProperties);
    }

    public function testAddConfigValue()
    {
        $this->block->addConfigProperty(new Block\Config\Property('test', 'test'));
        $this->assertEquals('test', $this->block->getConfigValue('test'));
        
        $this->block->addConfigValue(new Block\Config\Value('test', 'awesome'));
        $this->assertEquals('awesome', $this->block->getConfigValue('test'));
    }

    public function testSetConfigValue()
    {
        $this->block->addConfigProperty(new Block\Config\Property('test'));
        $this->block->setConfigValue('test', 'awesome');
        $this->assertEquals('awesome', $this->block->getConfigValue('test'));

        $this->block->setConfigValue('test', 'notawesome');
        $this->assertEquals('notawesome', $this->block->getConfigValue('test'));
    }

    /**
     * @expectedException Exception
     */
    public function testFailedGet()
    {
        $this->block->getConfigValue('test');
    }

    /**
     * @expectedException Exception
     */
    public function testFailedSet()
    {
        $this->block->setConfigValue('test', 'awesome');
        $this->block->getConfigValue('test');
    }

    public function testSetPage()
    {
        $this->block->setPage($this->page);
        $this->assertEquals($this->page, $this->block->getPage());
    }

    public function testSetLocation()
    {
        $this->block->setLocation(null);
        $this->assertEquals(null, $this->block->getLocation());

        $this->block->setLocation($this->left);
        $this->assertEquals($this->left, $this->block->getLocation());
    }

    public function testSetLocationFailedLocationOnPageBlock()
    {
        $this->setExpectedException('Core\Model\Exception');
        $this->page->addBlock($this->block, $this->left, 0);
        $this->block->setLocation(null);
    }

    public function testSetWeight()
    {
        $this->block->setWeight(null);
        $this->assertNull($this->block->getWeight());

        $this->block->setWeight(0);
        $this->assertEquals(0, $this->block->getWeight());

        $this->block->setWeight('1');
        $this->assertEquals(1, $this->block->getWeight());
    }

    public function testSetWeightNonNumeric()
    {
        $this->setExpectedException('Core\Model\Exception');
        $this->block->setWeight('test');
    }

    public function testSetWeightNullOnPageBlock()
    {
        $this->setExpectedException('Core\Model\Exception');
        $this->page->addBlock($this->block, $this->left, 0);
        $this->block->setWeight(null);
    }

    public function testSetView()
    {
        $this->block->setView($this->view);
        $this->assertEquals($this->view, $this->block->getView(false));
    }

    public function testSetViewNull()
    {
        $this->setExpectedException('Exception');
        $this->block->setView(null);
    }

    public function testSetConfigProperties()
    {
        $this->block->setConfigProperties(null);
        $this->assertTrue($this->block->getConfigProperties()->isEmpty());

        $property1 = new Block\Config\Property('test1');
        $property2 = new Block\Config\Property('test2');
        $properties = array($property1, $property2);
        $this->block->setConfigProperties($properties);
        $return = $this->block->getConfigProperties();
        $this->assertEquals(2, count($return));
        $this->assertEquals($property1, $return[$property1->getName()]);
        $this->assertEquals($property2, $return[$property2->getName()]);
    }

    public function testSetConfigPropertiesInvalidClassType()
    {
        $property1 = new Block\Config\Property('test1');
        $property2 = new \stdClass();
        $properties = array($property1, $property2);
        $this->setExpectedException('Core\Model\Exception');
        $this->block->setConfigProperties($properties);
    }

    public function testSetAndUnsetConfigValues()
    {
        $property1 = new Block\Config\Property('test1');
        $property2 = new Block\Config\Property('test2');
        $properties = array($property1, $property2);
        $this->block->setConfigProperties($properties);

        $this->block->setConfigValues(null);
        $this->assertTrue($this->block->getConfigValues()->isEmpty());

        $value1 = new Block\Config\Value('test1', 'test1');
        $value2 = new Block\Config\Value('test2', 'test2');
        $values = array($value1, $value2);
        $this->block->setConfigValues($values);
        $return = $this->block->getConfigValues();
        $this->assertEquals(2, count($return));
        $this->assertEquals($value1, $return[$value1->getName()]);
        $this->assertEquals($value2, $return[$value2->getName()]);

        $value3 = new Block\Config\Value('test3', 'test3');
        $this->block->setConfigValues(array($value3));
        $this->block->removeConfigValues(array('test1', 'test2'));
        $values = $this->block->getConfigValues();
        $this->assertEquals(FALSE, $values->contains($value1));
        $this->assertEquals(FALSE, $values->contains($value2));
        $this->assertEquals(TRUE, $values->contains($value3));

        $this->block->removeConfigValues();
        $values = $this->block->getConfigValues();
        $this->assertEquals(FALSE, $values->contains($value3));
    }

    public function testSetConfigValuesInvalidClassType()
    {
        $property1 = new Block\Config\Property('test1');
        $property2 = new Block\Config\Property('test2');
        $properties = array($property1, $property2);
        $this->block->setConfigProperties($properties);

        $value1 = new Block\Config\Value('test1', 'test1');
        $value2 = new \stdClass();
        $values = array($value1, $value2);
        $this->setExpectedException('Core\Model\Exception');
        $this->block->setConfigValues($values);
    }

    public function testSetConfiguration()
    {
        $configuration = array(
            'test1' => array(
                'default' => 'test',
                'required' => true,
                'inheritable' => false,
                'inheritableFrom' => 'Core\Model\Block'
            )
        );

        $this->block->setConfiguration(null);
        $this->assertNull($this->block->getConfiguration());

        $this->block->setConfiguration($configuration);
    }

    public function testSetInheritedFrom()
    {
        $block = new \Mock\Block($this->view);
        $this->block->setInheritedFrom($block);
        $this->assertEquals($block, $this->block->getInheritedFrom());

        $this->setExpectedException('Core\Model\Exception');
        $this->block->setInheritedFrom($this->block);
    }

    public function testRender()
    {
        $this->assertEquals('', $this->block->render());
    }

    public function testGetResourceId()
    {
        $this->assertEquals('Block.' . $this->block->id, $this->block->getResourceId());
    }

    public function testRoles()
    {
        $acl = new \Zend_Acl();
        $acl->addRole('admin');
        $acl->addRole('user');
        $acl->addResource(new \Zend_Acl_Resource('Block.'));
        $acl->allow('admin', null, array('view', 'delete', 'edit', 'configure', 'move'));
        \Zend_Registry::set('acl', $acl);

        $this->assertEquals(TRUE, $this->block->canView('admin'));
        $this->assertEquals(TRUE, $this->block->canDelete('admin'));
        $this->assertEquals(TRUE, $this->block->canEdit('admin'));
        $this->assertEquals(TRUE, $this->block->canConfigure('admin'));
        $this->assertEquals(TRUE, $this->block->canMove('admin'));

        $this->assertEquals(FALSE, $this->block->canView('user'));
        $this->assertEquals(FALSE, $this->block->canDelete('user'));
        $this->assertEquals(FALSE, $this->block->canEdit('user'));
        $this->assertEquals(FALSE, $this->block->canConfigure('user'));
        $this->assertEquals(FALSE, $this->block->canMove('user'));
    }
}
?>
