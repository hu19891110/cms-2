<?php
namespace Core\Model;

require_once 'PHPUnit/Framework.php';

/**
 * Test class for Layout.
 * Generated by PHPUnit on 2010-01-20 at 16:35:06.
 */
class LayoutTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Layout
     */
    protected $layout;

    protected $right;
    protected $left;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->layout = new Layout('test');
        $this->right = new Layout\Location('right');
        $this->left = new Layout\Location('left');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testAddLocation()
    {
        $this->layout->addLocation($this->right);
        $this->assertEquals(1, count($this->layout->getLocations()));
    }

    public function testRemoveLocation()
    {
        $this->layout->addLocation($this->right);
        $this->assertEquals(1, count($this->layout->getLocations()));
        $this->layout->removeLocation('right');
        $this->assertEquals(0, count($this->layout->getLocations()));
    }

    public function testGetFile()
    {
        $this->assertEquals('test', $this->layout->getFile());
    }

    public function testSetLocations()
    {
        $locations = array($this->left, $this->right);
        $this->layout->setLocations($locations);
        $this->assertEquals($locations, $this->layout->getLocations());

        $this->layout->setLocations(null);
        $this->assertEquals(null, $this->layout->getLocations());
    }

    public function testSetLocationsFailedType()
    {
        $locations = array($this->left, $this->right, new \stdClass());
        $this->setExpectedException('Core\Model\Exception');
        $this->layout->setLocations($locations);
    }

    public function testSetSysname()
    {
        $this->layout->setSysname('newSysname');
        $this->assertEquals('newSysname', $this->layout->getSysname());

        $this->setExpectedException('Core\Model\Exception');
        $this->layout->setSysname('');
    }

    public function testGetIdentifier()
    {
        $this->assertEquals($this->layout->getSysname(), $this->layout->getIdentifier());
    }

    public function testGetBasePath()
    {
        $this->assertEquals(APPLICATION_ROOT . "/themes/default/layouts/scripts", $this->layout->getBasePath());
    }

    public function testSetTitle()
    {
        $title = 'test';
        $this->assertEquals($title, $this->layout->setTitle($title)->title);

        for($i = 0; $i < 5; $i++)
        {
            $title .= $title;
        }

        $this->setExpectedException('Exception');
        $this->layout->setTitle($title);        
    }

    public function testGetTitle()
    {
        $title = 'title';
        $this->layout->setTitle($title);
        $this->assertEquals($title, $this->layout->getTitle());

        $this->layout->setTitle(null);
        $this->assertEquals($this->layout->getFile(), $this->layout->getTitle());
    }

    public function testGetLocation()
    {
        $this->layout->addLocation($this->right);
        $this->assertEquals($this->right, $this->layout->getLocation('right'));

        $this->assertEquals(null, $this->layout->getLocation('highUpThere'));
    }

    public function testAddPropertyChangedListener()
    {
        $this->layout->addPropertyChangedListener(new \Mock\PropertyChangedListener);
        $this->setExpectedException('Exception');
        $this->layout->addPropertyChangedListener('listener');
    }

    public function testIsSet()
    {
        $this->layout->setTitle('testTitle');
        $this->assertEquals(TRUE, isset($this->layout->title));

        $this->layout->setTitle(null);
        $this->assertEquals(FALSE, isset($this->layout->title));
    }

    public function testSet()
    {
        $this->layout->title = 'title';
        $this->assertEquals('title', $this->layout->getTitle());
        $this->layout->_layout = 'new';
        $this->assertEquals('new', $this->layout->_layout);
    }

    public function testSetData()
    {
        $this->layout->setData(array(
            'title' => 'title',
            'sysname' => 'sysname'
        ));
        $this->assertEquals('title', $this->layout->title);
        $this->assertEquals('sysname', $this->layout->sysname);
    }
}
?>
