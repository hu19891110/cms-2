<?php
namespace Core\Model;

require_once 'PHPUnit/Framework.php';
require_once __DIR__ . '/../../../bootstrap.php';

/**
 * Test class for Entity.
 * Generated by PHPUnit on 2009-12-16 at 10:46:52.
 */
class AbstractModelTest extends \PHPUnit_Framework_TestCase {
    /**
     * @var Entity
     */
    protected $model;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->model = new \Mock\Model;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }

    public function testBadGet ()
    {
        $this->setExpectedException('\Exception');
        $this->model->badProperty;
    }

    public function test__getAnd__set() {
        $this->model->num = 1;
        $this->assertEquals($this->model->num, 1);
        $this->assertFalse($this->model->hit);

        $this->model->setNum(2);
        $this->assertEquals($this->model->num, 2);
        $this->assertEquals($this->model->getNum(), 2);
    }

    public function test__getAnd__setCallFunctionsFirst() {
        $this->model->name = 'test';
        $this->assertTrue($this->model->hit);

        $this->model->hit = false;
        $this->model->name;
        $this->assertTrue($this->model->hit);
    }

    public function test__call() {
        $this->model->testHit();
        $this->assertTrue($this->model->hit);
    }

    public function test__callBad() {
        $this->setExpectedException('\Exception');
        $this->model->badFunctionCall();
    }

    public function testSetData() {
        $array = array('num' => 1, 'name' => 'test', 'fake' => 'cool');
        $this->model->setData($array);
        $this->assertEquals($this->model->num, 1);
        $this->assertEquals($this->model->name, 'test');
    }

    public function testIsset()
    {
        $this->assertTrue(isset($this->model->name));
        $this->assertFalse(isset($this->model->random));
    }

    public function testGetIdentifier()
    {
        $this->assertEquals($this->model->getIdentifier(), $this->model->getId());
    }

    public function testSetId()
    {
        $this->setExpectedException('\Core\Model\Exception');
        $this->model->setId(2);
    }

    public function testGetCollectionAsArray()
    {
        $collection = array(
            new TestObject(),
            new TestObject()
        );

        $data = array(
            array(
                'one' => 1,
                'two' => 2
            ),
            array(
                'one' => 1,
                'two' => 2
            )
        );

        $model = new ConcreteAbstractModel();
        $newData = $model->getCollectionAsArray($collection);
        $this->assertEquals($data, $newData);

        $data = array(
            array(
                'one' => 1,
                'two' => 2,
                'three' => 3
            ),
            array(
                'one' => 1,
                'two' => 2,
                'three' => 3
            )
        );
        
        $this->assertEquals($data, $model->getCollectionAsArray($collection, array('options' => array())));
        $this->assertEquals(null, $model->getCollectionAsArray(array(), array('options' => array())));

    }

    public function testSetIfSet()
    {
        $data = array(
            'test' => 1
        );

        $model = new \Core\Model\ConcreteAbstractModel();
        $model->setIf('test', $data);
        $this->assertEquals($data['test'], $model->test);
    }

    public function testGetArrayIfSet()
    {
        $data = array(
            'one' => 1,
            'two' => 2
        );

        $test = new TestObject();
        $model = new \Core\Model\ConcreteAbstractModel();
        $model->setTest($test);

        $this->assertEquals($data, $model->getArrayIf('test', array('test')));
        $this->assertEquals($data, $model->getArrayIf('test', array('test' => array())));
        $this->assertEquals($data, $model->getArrayIf('test', array('test' => null)));

        $data = \array_merge($data, array('three' => 3));
        $this->assertEquals($data, $model->getArrayIf('test', array('test' => array('options'))));
        $this->assertEquals($data, $model->getArrayIf('test', array('test' => array('options' => array()))));

        $collection = array(
            new TestObject(),
            new TestObject()
        );

        $data = array(
            array(
                'one' => 1,
                'two' => 2
            ),
            array(
                'one' => 1,
                'two' => 2
            )
        );
        
        $model->setCollection($collection);
        $this->assertEquals($data, $model->getArrayIf('collection', array('collection')));
    }

    public function testToArray()
    {
        $collection = array(
            new TestObject(),
            new TestObject()
        );

        $data = array(
            array(
                'one' => 1,
                'two' => 2
            ),
            array(
                'one' => 1,
                'two' => 2
            )
        );

        $date = new \DateTime();

        $model = new ConcreteAbstractModel();
        $model->setCollection($collection);
        $model->setTest('test');
        $model->setObject(new TestObject());
        $model->setDate($date);
        
        $data = array(
            'test' => 'test',
            'collection' => null,
            'object' => null,
            'date' => $date->format('Y-m-d H:i:s')
        );

        $this->assertEquals($data, $model->toArray());

        $data['collection'] = array(
            array('one' => 1, 'two' => 2),
            array('one' => 1, 'two' => 2)
        );

        $this->assertEquals($data, $model->toArray(array('collection')));

        $data['object'] = array('one' => 1, 'two' => 2);
        $this->assertEquals($data, $model->toArray(array('collection', 'object')));
    }
}

class ConcreteAbstractModel extends AbstractModel
{
    public $test;
    public $object;
    public $collection = array();
    public $date;

    public function getCollectionAsArray($collection, $options = null)
    {
        return  parent::_getCollectionAsArray($collection, $options);
    }

    public function setIf($key, $array)
    {
        $this->_setIfSet($key, $array);
    }

    public function getTest()
    {
        return $this->test;
    }

    public function setTest($value)
    {
        $this->test = $value;
    }

    public function getArrayIf($key, $array)
    {
        return $this->_getArrayIfSet($key, $array);
    }

    public function getCollection()
    {
        return $this->collection;
    }

    public function setCollection($collection)
    {
        $this->collection = $collection;
    }

    public function toArray($includes = null)
    {
        return $this->_toArray($includes);
    }

    public function setObject($object)
    {
        $this->object = $object;
    }

    public function getObject()
    {
        return $this->object;
    }

    public function getDate()
    {
        return $this->date;
    }

    public function setDate($date)
    {
        $this->date = $date;
    }
}

class TestObject
{
    public function toArray($includes)
    {
        $data = array('one' => 1, 'two' => 2);

        if(is_array($includes)) {
            if(in_array('options', $includes) || \array_key_exists('options', $includes)) {
                $data['three'] = 3;
            }
        }

        return $data;
    }
}